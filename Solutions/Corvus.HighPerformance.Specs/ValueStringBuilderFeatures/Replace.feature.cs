// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ValueStringBuilderFeatures
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReplaceContentInAValueStringBuilderFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Replace.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValueStringBuilderFeatures", "Replace content in a ValueStringBuilder", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Replace content in a ValueStringBuilder")))
            {
                await global::ValueStringBuilderFeatures.ReplaceContentInAValueStringBuilderFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No change")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Replace content in a ValueStringBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "", null)]
        public async System.Threading.Tasks.Task NoChange(string initializationType, string notUsed6248, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("InitializationType", initializationType);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No change", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
 await testRunner.GivenAsync(string.Format("a ValueStringBuilder initialized with \'{0}\' of length 13", initializationType), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
 await testRunner.AndAsync("I append \'Hello, World!\' to the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 6
 await testRunner.AndAsync("I replace \'notpresent\' with \'notused\' at index 0 with count 13", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
 await testRunner.WhenAsync("I get the string from the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync("the ValueStringBuilder string should be \'Hello, World!\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Shrinks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Replace content in a ValueStringBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "i", "0", "13", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "i", "0", "13", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "i", "1", "12", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "i", "1", "12", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "i", "1", "3", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "i", "1", "3", "Hio, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "i", "1", "2", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "i", "1", "2", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "i", "2", "11", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "i", "2", "11", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "x", "2", "23", "Hello, Wxld x wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "x", "2", "23", "Hello, Wxld x wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "x", "2", "10", "Hello, Wxld or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "x", "2", "10", "Hello, Wxld or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "x", "9", "6", "Hello, World x wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "x", "9", "6", "Hello, World x wherever!", null)]
        public async System.Threading.Tasks.Task Shrinks(string initializationType, string find, string replacement, string start, string length, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("InitializationType", initializationType);
            argumentsOfScenario.Add("Find", find);
            argumentsOfScenario.Add("Replacement", replacement);
            argumentsOfScenario.Add("Start", start);
            argumentsOfScenario.Add("Length", length);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Shrinks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.GivenAsync(string.Format("a ValueStringBuilder initialized with \'{0}\' of length 23", initializationType), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
 await testRunner.AndAsync("I append \'Hello, World or wherever!\' to the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("I replace \'{0}\' with \'{1}\' at index {2} with count {3}", find, replacement, start, length), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.WhenAsync("I get the string from the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.ThenAsync(string.Format("the ValueStringBuilder string should be \'{0}\'", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changes without length change")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Replace content in a ValueStringBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "ijk", "0", "13", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "ijk", "0", "13", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "ijk", "1", "12", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "ijk", "1", "12", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "ijk", "1", "3", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "ijk", "1", "3", "Hijko, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "ijk", "1", "2", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "ijk", "1", "2", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "ell", "ijk", "2", "11", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "ell", "ijk", "2", "11", "Hello, World or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "al", "2", "23", "Hello, Walld al wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "al", "2", "23", "Hello, Walld al wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "al", "2", "10", "Hello, Walld or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "al", "2", "10", "Hello, Walld or wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "or", "al", "9", "6", "Hello, World al wherever!", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "or", "al", "9", "6", "Hello, World al wherever!", null)]
        public async System.Threading.Tasks.Task ChangesWithoutLengthChange(string initializationType, string find, string replacement, string start, string length, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("InitializationType", initializationType);
            argumentsOfScenario.Add("Find", find);
            argumentsOfScenario.Add("Replacement", replacement);
            argumentsOfScenario.Add("Start", start);
            argumentsOfScenario.Add("Length", length);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Changes without length change", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
 await testRunner.GivenAsync(string.Format("a ValueStringBuilder initialized with \'{0}\' of length 23", initializationType), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
 await testRunner.AndAsync("I append \'Hello, World or wherever!\' to the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
 await testRunner.AndAsync(string.Format("I replace \'{0}\' with \'{1}\' at index {2} with count {3}", find, replacement, start, length), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync("I get the string from the ValueStringBuilder", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.ThenAsync(string.Format("the ValueStringBuilder string should be \'{0}\'", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Grows but fits in available space")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Replace content in a ValueStringBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "", null)]
        public async System.Threading.Tasks.Task GrowsButFitsInAvailableSpace(string initializationType, string notUsed6248, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("InitializationType", initializationType);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Grows but fits in available space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Grows and requires resize")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Replace content in a ValueStringBuilder")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Span", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Capacity", "", null)]
        public async System.Threading.Tasks.Task GrowsAndRequiresResize(string initializationType, string notUsed6248, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("InitializationType", initializationType);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Grows and requires resize", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
